import edu.ucdavis.jr.*;
import java.util.*;
import java.util.ArrayList;


public class Cupboard {

  private ArrayList<Item> items;  

  public op void aquireItem(Item);
  public op void putBackItem(Item);
  
 
  public Cupboard(List<Item> items) {
    this(items, 0, 0);    
  }  

  public Cupboard() {
    this(Global.IngrediensList, Global.startGlassCount, Global.startCupsCount);    
  }  
  
  public Cupboard(List<Item> inItems, int startNumGlasses, int startNumCups) {
    items = new ArrayList(inItems);    
    for(int i = 0; i < startNumGlasses; i++)
      {
        items.add(Global.glass);        
      }    
    for(int i = 0; i < startNumCups; i++)
      {
        items.add(Global.cup);        
      }    
    Global.cupboard = this;    
  }  

  private process cupBoardProcess {
    startLoop();    
    System.out.println("cupBoard process exits ...");
  }



  // I added this as a seperate method to be able to override stupid warnings
  @SuppressWarnings("unchecked")   
  private void startLoop()
  {
    while(true)
      {
        inni void aquireItem(Item request) st items.contains(request)
        {
          items.remove(request);          
        }
        [] void putBackItem(Item anotherItem)
        {
          items.add(anotherItem);            
        }
      }
  }
  
  


  /***************************************************
     TESTING CODE BELOW

  ***************************************************/
  public static void main(String[] args) {
    allCupboardTests();
  }

  public static void allCupboardTests()
  {
    testStartsWithItems();
    testAddItems();
    testAquireItems();
    testTakeSeveralIngredients();
    System.out.println("Cupboard tests passed.");    
  }



  public static void testStartsWithItems()
  {
    Cupboard cb = new Cupboard(Arrays.asList(Global.beerTap));
    asserts(cb.items.contains(Global.beerTap), "BeerTap not found.");       
  }  

  public static void testAddItems()
  {
    Cupboard cb = new Cupboard(Arrays.asList(Global.beerTap));
    cb.putBackItem(Global.coffee);    
    asserts(cb.items.contains(Global.beerTap), "BeerTap not found. 2");       
    asserts(cb.items.contains(Global.coffee), "Coffee not found. 2");       
  }  

  public static void testAquireItems()
  {
    Cupboard cb = new Cupboard(Arrays.asList(Global.beerTap, Global.coffee));
    cb.aquireItem(Global.coffee);    
    asserts(cb.items.contains(Global.beerTap), "BeerTap not found. 3");       
    asserts(!cb.items.contains(Global.coffee), "Coffee still in cupboard. 3"); 
    cb.aquireItem(Global.beerTap);
    asserts(!cb.items.contains(Global.beerTap), "BeerTap still in cupboard. 3");           
  }  
 
  //It's really noteworthy that this testcase fails when different ingredients
  //Are taken in some order 
  public static void testTakeSeveralIngredients()
  {
    final List<Beverage> bl = Global.beverageList;
    for(int tries = 0; tries < 10; tries++)
      {        
        for(int i = 0; i < bl.size(); i++)
          for(int j = 0; j < bl.size(); j++)
            {  
              Cupboard cb = new Cupboard();
              new ItemTaker(bl.get(i).getIngredients(), cb);
              new ItemTaker(bl.get(j).getIngredients(), cb);                              
            }
      }
         
    for(int i = 0; i < bl.size()*bl.size()*10*2; i++ )
      {        
        P(ItemTaker.s);   
      }    
  }  
  
  // This class is ONLY used in testing
  private static class ItemTaker
  {
    private List<Item> items;   
    private Cupboard cb;    
    private static Random r = new Random();
    public static sem s = 0;
    
    public ItemTaker(List<Item> items, Cupboard cb)
    {
      this.items = items;      
      this.cb = cb;
      
    }    
    public process p{
      for (Iterator<Item> it = items.iterator(); it.hasNext();) {    
        JR.nap(r.nextInt(100)); // testing randomness :)
        Item item = it.next();        
        call cb.aquireItem(item);    
      }
      for (Iterator<Item> it = items.iterator(); it.hasNext();) {
        JR.nap(10);        
        Item item = it.next();
        call cb.putBackItem(item);
      }
      V(s);      
    }    
  }
  

  public static void asserts(boolean b, String s)
  {
    if(!b)
      {
        System.out.println("CupboardAssert failed: " + s);
        System.exit(1);
      }
  }

}
