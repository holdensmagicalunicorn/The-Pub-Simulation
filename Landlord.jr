import edu.ucdavis.jr.*;
import java.util.*;
import java.util.ArrayList;


public class Landlord extends Mixologist {

  private op void doorsReplyChannel();
  private op void alarm();
  
  private int numDoorCalls = 0;

  public Landlord()
  {
    super("Landlord");    
    Global.clock.setAlarmEndTime(alarm);    
    Global.clock.setAlarm(alarm, new MyTime(Global.simulationTimeInSeconds-600)); 
  }
  

  protected boolean shouldGoHome()
  {
    return numDoorCalls >= 2;    
  }  
  
  protected void oneIteration()
  {
    inni void alarm()
    {

      if(numCalls++ == 0)
        {
          say("Last call!");
          
        }
      else
        {
          say("Closing time!");
        }      
      List<Person> entrants = Global.door.lock(doorsReplyChannel); // first call actually isnt lock
      for(Person p : entrants)
        {
          send p.tellLastCallOrClosing();      
        }
    }
    [] void doorsReplyChannel()
      { 
        if(numDoorCalls++ == 0)
          {
            // tell assistant to do last round
            say("Telling assistant to do last round");            
            send Global.assistant.onlyTwoLeft();         
          }
        else
          {

            gatherStatistics();   

            /*
             * We have some problems here:
             *
             * For some reason the landlord will stop execution after shutdown()
             * of the clock, even though the call is ASYNCHRONUS!
             *
             * We assume this is a JR bug and ignores this for now because
             * we have no clue for the cause of it, and it's not so relevant
             * for message passing etc.
             *
             */
            say("About to shutdown clock"); 
            send Global.clock.shutdown();
            say("Shutdowned clock");
          }          
      }  
    [] boolean Global.orderingChannel(Beverage beverage)    
      {
        return mixDrink(beverage);        
      }    
  }

  private void gatherStatistics()
  {  
    //Gather statistics here!
    say("Gathering statistics");
  }
  

}
