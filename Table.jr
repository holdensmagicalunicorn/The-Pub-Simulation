import edu.ucdavis.jr.*;
import java.util.*;
import java.util.ArrayList;


public class Table {

  private ArrayList<BeverageWare> beverages;
  private int capacity;
  private static int startId = 0;  
  private int id;
  

  public op void addSmall(BeverageWare bw);
  public op void addLarge(BeverageWare bw);
  public op ArrayList<BeverageWare> clearTable();
  
 
  public Table() {
    beverages = new ArrayList<BeverageWare>();
    id = startId++;
    capacity = Global.tableCapacities;    
  }  


  @Override
  public String toString() {
    return "Table " + id;    
  }  

  private process tableProcess {
    startLoop();    
    System.out.println("Table process exits ...");
  }



  //@SuppressWarnings("unchecked")   
  private void startLoop()
  {
    while(true)
      {
      }
  }
  

  @SuppressWarnings("unchecked")   
  private void addBeverageWare(BeverageWare bw)
  {
    beverages.add(bw); // This darn command adds stupid warning   
  }
  
  private int unitsRemaining()
  {
    int taken = 0;
    for (BeverageWare bw: beverages) {
      taken += bw.getSpaceUnits();
    }

    return capacity - taken;
  }








  /***************************************************
     TESTING CODE BELOW

  ***************************************************/
  public static void main(String[] args) {
    allDoorTests();
  }

  public static void allDoorTests()
  {
    testOnePersonEnters();
    testOnePersonLeaving();
    testDoor();
    
  }

  // This test is starting other threads
  public static void testOnePersonEnters()
  {
  }  

  public static void testOnePersonLeaving()
  {
  }


  public static void testDoor()
  {

  }



  
  public static void asserts(boolean b, String s)
  {
    if(!b)
      {
        System.out.println("TableAssert failed: " + s);
        System.exit(1);
      }
  }
}