import edu.ucdavis.jr.*;
import java.util.*;
import java.util.ArrayList;


public class Door {

  private ArrayList<Person> entrants;
  private boolean isLocked;
  private cap void() returnOkCap;
  

  public op boolean add(Person p);
  public op ArrayList<Person> lock(cap void() returnOkCap);
  public op void leave(Person p);
  
 
  public Door() {
    entrants = new ArrayList<Person>();
    isLocked = false;
    Global.door = this;
    
  }  

  private process doorProcess {
    startLoop();    
    System.out.println("Door process exits ...");
  }



  // I added this as a seperate method to be able to override stupid warnings
  @SuppressWarnings("unchecked")   
  private void startLoop()
  {
    while(true)
      {
        inni ArrayList<Person> lock(cap void() returnOkCap)
        {
          isLocked = true;
          this.returnOkCap = returnOkCap;
          
          return new ArrayList<Person>(entrants); // This adds stupid warning
          
        }
        [] boolean add(Person p)
          {
            if(isLocked)
              {
        	return false;
              }
            addPersonToList(p);            
            return true;
        
          }
        [] void leave(Person p)
          {
            removePersonFromList(p);            
            if(isLocked && entrants.size() == 1)
              {
                send returnOkCap();
        	break;
              }
          }
      }
  }
  

  @SuppressWarnings("unchecked")   
  private void addPersonToList(Person p)
  {
    entrants.add(p); // This darn command adds stupid warning   
  }
  

  @SuppressWarnings("unchecked")   
  private void removePersonFromList(Person p)
  {
    entrants.remove(p); // This darn command adds stupid warning   
  }



  public static void main(String[] args) {
    allDoorTests();
    
    
    
  }

  public static void allDoorTests()
  {
    testOnePeopleEnters();
    testOneLeaving();
  }

  // This test is starting other threads
  public static void testPersonLeaving()
  {
    Door d = new Door();
    Person p = new Person();
    
    JR.nap(10);
    p.leaveBar();
    JR.nap(10);    
    
    asserts(d.entrants.size() == 0, "Everyone should have exited.");
  }

  // This test is starting other threads
  public static void testOnePersonEnters()
  {
    Door d = new Door();
    asserts(d.entrants.size() == 0, "Door should start empty");    
    Person p = new Person();
    
    JR.nap(10);

    asserts(d.entrants.get(0) == p, "Person p should be in list");    
    asserts(d.entrants.size() == 1, "Should only be 1 person in list");    
    
  }
  
  public static void asserts(boolean b, String s)
  {
    if(!b)
      {
        System.out.println("s = " + s);
        System.exit(1);
      }
  }

}